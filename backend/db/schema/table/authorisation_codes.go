//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AuthorisationCodes = newAuthorisationCodesTable("public", "authorisation_codes", "")

type authorisationCodesTable struct {
	postgres.Table

	// Columns
	Code     postgres.ColumnString
	ClientID postgres.ColumnString
	UserID   postgres.ColumnString
	Created  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AuthorisationCodesTable struct {
	authorisationCodesTable

	EXCLUDED authorisationCodesTable
}

// AS creates new AuthorisationCodesTable with assigned alias
func (a AuthorisationCodesTable) AS(alias string) *AuthorisationCodesTable {
	return newAuthorisationCodesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuthorisationCodesTable with assigned schema name
func (a AuthorisationCodesTable) FromSchema(schemaName string) *AuthorisationCodesTable {
	return newAuthorisationCodesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuthorisationCodesTable with assigned table prefix
func (a AuthorisationCodesTable) WithPrefix(prefix string) *AuthorisationCodesTable {
	return newAuthorisationCodesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuthorisationCodesTable with assigned table suffix
func (a AuthorisationCodesTable) WithSuffix(suffix string) *AuthorisationCodesTable {
	return newAuthorisationCodesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuthorisationCodesTable(schemaName, tableName, alias string) *AuthorisationCodesTable {
	return &AuthorisationCodesTable{
		authorisationCodesTable: newAuthorisationCodesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newAuthorisationCodesTableImpl("", "excluded", ""),
	}
}

func newAuthorisationCodesTableImpl(schemaName, tableName, alias string) authorisationCodesTable {
	var (
		CodeColumn     = postgres.StringColumn("code")
		ClientIDColumn = postgres.StringColumn("client_id")
		UserIDColumn   = postgres.StringColumn("user_id")
		CreatedColumn  = postgres.TimestampColumn("created")
		allColumns     = postgres.ColumnList{CodeColumn, ClientIDColumn, UserIDColumn, CreatedColumn}
		mutableColumns = postgres.ColumnList{ClientIDColumn, UserIDColumn, CreatedColumn}
	)

	return authorisationCodesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Code:     CodeColumn,
		ClientID: ClientIDColumn,
		UserID:   UserIDColumn,
		Created:  CreatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
