//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AccessTokens = newAccessTokensTable("public", "access_tokens", "")

type accessTokensTable struct {
	postgres.Table

	// Columns
	Token    postgres.ColumnString
	ClientID postgres.ColumnString
	UserID   postgres.ColumnString
	Created  postgres.ColumnTimestamp
	LastUsed postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AccessTokensTable struct {
	accessTokensTable

	EXCLUDED accessTokensTable
}

// AS creates new AccessTokensTable with assigned alias
func (a AccessTokensTable) AS(alias string) *AccessTokensTable {
	return newAccessTokensTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccessTokensTable with assigned schema name
func (a AccessTokensTable) FromSchema(schemaName string) *AccessTokensTable {
	return newAccessTokensTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccessTokensTable with assigned table prefix
func (a AccessTokensTable) WithPrefix(prefix string) *AccessTokensTable {
	return newAccessTokensTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccessTokensTable with assigned table suffix
func (a AccessTokensTable) WithSuffix(suffix string) *AccessTokensTable {
	return newAccessTokensTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccessTokensTable(schemaName, tableName, alias string) *AccessTokensTable {
	return &AccessTokensTable{
		accessTokensTable: newAccessTokensTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newAccessTokensTableImpl("", "excluded", ""),
	}
}

func newAccessTokensTableImpl(schemaName, tableName, alias string) accessTokensTable {
	var (
		TokenColumn    = postgres.StringColumn("token")
		ClientIDColumn = postgres.StringColumn("client_id")
		UserIDColumn   = postgres.StringColumn("user_id")
		CreatedColumn  = postgres.TimestampColumn("created")
		LastUsedColumn = postgres.TimestampColumn("last_used")
		allColumns     = postgres.ColumnList{TokenColumn, ClientIDColumn, UserIDColumn, CreatedColumn, LastUsedColumn}
		mutableColumns = postgres.ColumnList{ClientIDColumn, UserIDColumn, CreatedColumn, LastUsedColumn}
	)

	return accessTokensTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Token:    TokenColumn,
		ClientID: ClientIDColumn,
		UserID:   UserIDColumn,
		Created:  CreatedColumn,
		LastUsed: LastUsedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
