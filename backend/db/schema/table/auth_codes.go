//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AuthCodes = newAuthCodesTable("public", "auth_codes", "")

type authCodesTable struct {
	postgres.Table

	// Columns
	Code        postgres.ColumnString
	ClientID    postgres.ColumnString
	UserID      postgres.ColumnString
	RedirectURI postgres.ColumnString
	Created     postgres.ColumnTimestamp
	Expires     postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AuthCodesTable struct {
	authCodesTable

	EXCLUDED authCodesTable
}

// AS creates new AuthCodesTable with assigned alias
func (a AuthCodesTable) AS(alias string) *AuthCodesTable {
	return newAuthCodesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuthCodesTable with assigned schema name
func (a AuthCodesTable) FromSchema(schemaName string) *AuthCodesTable {
	return newAuthCodesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuthCodesTable with assigned table prefix
func (a AuthCodesTable) WithPrefix(prefix string) *AuthCodesTable {
	return newAuthCodesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuthCodesTable with assigned table suffix
func (a AuthCodesTable) WithSuffix(suffix string) *AuthCodesTable {
	return newAuthCodesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuthCodesTable(schemaName, tableName, alias string) *AuthCodesTable {
	return &AuthCodesTable{
		authCodesTable: newAuthCodesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newAuthCodesTableImpl("", "excluded", ""),
	}
}

func newAuthCodesTableImpl(schemaName, tableName, alias string) authCodesTable {
	var (
		CodeColumn        = postgres.StringColumn("code")
		ClientIDColumn    = postgres.StringColumn("client_id")
		UserIDColumn      = postgres.StringColumn("user_id")
		RedirectURIColumn = postgres.StringColumn("redirect_uri")
		CreatedColumn     = postgres.TimestampColumn("created")
		ExpiresColumn     = postgres.TimestampColumn("expires")
		allColumns        = postgres.ColumnList{CodeColumn, ClientIDColumn, UserIDColumn, RedirectURIColumn, CreatedColumn, ExpiresColumn}
		mutableColumns    = postgres.ColumnList{ClientIDColumn, UserIDColumn, RedirectURIColumn, CreatedColumn, ExpiresColumn}
	)

	return authCodesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Code:        CodeColumn,
		ClientID:    ClientIDColumn,
		UserID:      UserIDColumn,
		RedirectURI: RedirectURIColumn,
		Created:     CreatedColumn,
		Expires:     ExpiresColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
